////////////////////////////////////////////////////////////////////////////////
//! \file socket_handler.hpp
//! \author Jacob Reger (regerjacob@gmail.com)
//! \brief This is the header file for the base class Socket_Handler from which
//! Client_Socket and Server_Socket inherit.
//! \version 0.1
//! \date 2023-04-08
//! 
//! \copyright Copyright (c) 2023
//! 
////////////////////////////////////////////////////////////////////////////////
#pragma once

#include <sdkddkver.h>
#include <iostream>
#include <winsock2.h>
#include <windows.h>
#include <ws2tcpip.h>
#include <iphlpapi.h>
#include <cstdlib>
#include <sys/types.h>
#include <fstream>
#include <string>

////////////////////////////////////////////////////////////////////////////////
//! \brief Basic macro to represent the selected protocol
//! 
////////////////////////////////////////////////////////////////////////////////
#define INTERNET_PROTOCOL 0

////////////////////////////////////////////////////////////////////////////////
//! \brief Macro for logging an error, always passed into the log function
//! defined below.
//! 
////////////////////////////////////////////////////////////////////////////////
#define LOG_ERROR "ERROR"

////////////////////////////////////////////////////////////////////////////////
//! \brief Macro for logging info, always passed into the log function defined
//! below.
//! 
////////////////////////////////////////////////////////////////////////////////
#define LOG_INFO "INFO"

////////////////////////////////////////////////////////////////////////////////
//! \brief Macro for logging warnings, always passed into the log function
//! defined below.
//! 
////////////////////////////////////////////////////////////////////////////////
#define LOG_WARNING "WARNING"

////////////////////////////////////////////////////////////////////////////////
//! \brief Macro for the default port to select. Feel free to change if you want
//! to connect using a different port. Server and client must match.
//! 
////////////////////////////////////////////////////////////////////////////////
#define DEFUALT_PORT "50000"

////////////////////////////////////////////////////////////////////////////////
//! \brief Macro for the set buffer length for socket communication. Change to
//! increase or decrease the maximum buffer size.
//! 
////////////////////////////////////////////////////////////////////////////////
#define BUFFER_LEN 1024

// Forward declarations becuase windows is a piece of shit sometimes
#ifdef __cplusplus
extern "C" {
#endif
    void WSAAPI freeaddrinfo(struct addrinfo*);

    int WSAAPI getaddrinfo(const char*, const char*, const struct addrinfo*,
        struct addrinfo**);

    int WSAAPI getnameinfo(const struct sockaddr*, socklen_t, char*, DWORD,
        char*, DWORD, int);
#ifdef __cplusplus
}
#endif

////////////////////////////////////////////////////////////////////////////////
//! \enum SOCK_STATUS
//! \brief Enum representing possible socket statuses.
//! 
////////////////////////////////////////////////////////////////////////////////
enum SOCK_STATUS
{
    SOCK_SUCCESS = 0,
    SOCK_GENERAL_FAIL = 1,
    SOCK_CONNECTION_CLOSED = 2,
    SOCK_NOT_IMPLEMENTED = 3
};

////////////////////////////////////////////////////////////////////////////////
//! \brief A base class for the other sockets. Should not be used alone, needs
//! to be built off of with a child class.
//! 
////////////////////////////////////////////////////////////////////////////////
class Socket_Handler
{
private:
protected:
    ////////////////////////////////////////////////////////////////////////////////
    //! \brief Handle to the socket being used for base communication.
    //! 
    ////////////////////////////////////////////////////////////////////////////////
    SOCKET socketHandle = INVALID_SOCKET;

    ////////////////////////////////////////////////////////////////////////////////
    //! \brief Pointer to an addrinfo struct which contains the info for the address
    //! for the socket connection.
    //! 
    ////////////////////////////////////////////////////////////////////////////////
    struct addrinfo* address = NULL;

    ////////////////////////////////////////////////////////////////////////////////
    //! \brief A handle to a file for logging information.
    //! 
    ////////////////////////////////////////////////////////////////////////////////
    std::ofstream logFile;

    ////////////////////////////////////////////////////////////////////////////////
    //! \brief WSAData for windows initialization of socket communication.
    //! 
    ////////////////////////////////////////////////////////////////////////////////
    WSADATA wsaData;

    ////////////////////////////////////////////////////////////////////////////////
    //! \brief addrinfo struct for passing in the recommendations to getaddrinfo()
    //! 
    ////////////////////////////////////////////////////////////////////////////////
    struct addrinfo hints;

    ////////////////////////////////////////////////////////////////////////////////
    //! \brief Inline log function to add a log message to the logfile.
    //! 
    //! \param type The type of log to be entered. See LOG macros.
    //! \param message Message attached to the log.
    ////////////////////////////////////////////////////////////////////////////////
    inline void log(std::string type, std::string message) { logFile << type << ": " << message << std::endl; }

    ////////////////////////////////////////////////////////////////////////////////
    //! \brief Initialize the WSA for windows socket comms.
    //! 
    //! \return SOCK_STATUS representing if the operation succeeded or failed.
    ////////////////////////////////////////////////////////////////////////////////
    SOCK_STATUS initWSA();

    ////////////////////////////////////////////////////////////////////////////////
    //! \brief Initialize the logfile.
    //! 
    //! \return SOCK_STATUS representing if the operation succeeded or failed.
    ////////////////////////////////////////////////////////////////////////////////
    SOCK_STATUS initLog();

    ////////////////////////////////////////////////////////////////////////////////
    //! \brief Wrapper around recv socket function taking C++ string.
    //! 
    //! \param buffer C++ string for receiving message.
    //! \param size Size of the message, deprecated and will be removed.
    //! \return SOCK_STATUS representing if the operation succeeded or failed.
    ////////////////////////////////////////////////////////////////////////////////
    virtual SOCK_STATUS sockReceive(std::string& buffer);

    ////////////////////////////////////////////////////////////////////////////////
    //! \brief Wrapper around send socket function taking C++ string.
    //! 
    //! \param buffer C++ string for message to send.
    //! \param size Size of the meessage, deprecated and will be removed.
    //! \return SOCK_STATUS representing if the operation succeeded or failed.
    ////////////////////////////////////////////////////////////////////////////////
    virtual SOCK_STATUS sockSend(std::string buffer);

    ////////////////////////////////////////////////////////////////////////////////
    //! \brief Retreive address information.
    //! 
    //! \return SOCK_STATUS representing if the operation succeeded or failed.
    ////////////////////////////////////////////////////////////////////////////////
    virtual SOCK_STATUS initAddr();

    ////////////////////////////////////////////////////////////////////////////////
    //! \brief Thread controller for receiving thread.
    //! 
    ////////////////////////////////////////////////////////////////////////////////
    void threadControlReceive();
public:
    ////////////////////////////////////////////////////////////////////////////////
    //! \brief Construct a new Socket_Handler object
    //! 
    ////////////////////////////////////////////////////////////////////////////////
    Socket_Handler();

    ////////////////////////////////////////////////////////////////////////////////
    //! \brief Destroy the Socket_Handler object
    //! 
    ////////////////////////////////////////////////////////////////////////////////
    ~Socket_Handler();
};